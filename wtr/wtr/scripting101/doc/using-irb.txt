Using IRB to Drive Internet Explorer

C:\Ruby\lib\ruby\site_ruby\1.8\cl>irb 			# Start the ruby interpreter, irb. 
irb(main):001:0> 	# irb's prompt -- it is waiting for user input.  From here on, I'll show the user input on the same line as the preceding irb prompt.
irb(main):001:0> load 'iec.rb' 		# User typed "load 'iec.rb'". Loads the IE Controller source file
=> true 				# Ruby reports the return value from the last command, in this case "load 'iec.rb'", then displays the irb prompt again
irb(main):001:0> Dir.chdir 'c:/wtr/scripting101/lab'	# Change directory
=> 0					# Ruby's return value from Dir.chdir command
irb(main):001:0> load 'toolkit.rb' 	# Load the WTR toolkit
=> true 				# Return value from load
irb(main):002:0> start_ie("http://localhost:8080") 	# Start the Internet Explorer browser at the given URL: the Timeclock login page
=> #<CLabs::IEC::ClIEController:0x32476f0 @auto_wrap_form=false, @ie=#<WIN32OLE:0x32476a8>, @options={:visible=>true}>		# Return value from start_ie: coded info about IE browser
irb(main):003:0> show_forms 		# Show form actions on current page
action: login				# One form with action 'login'
=> nil 					# No value returned by show_forms command
irb(main):004:0> login_form = get_forms[0] 	# Assign first (and only, in this case) form on current page to variable name 'login_form'.  Use variables for convenience and memory aids.
=> #<CLabs::IEC::IEDomFormWrapper:0x2b03d78 @form=#<WIN32OLE:0x2b03d90>> 	# Return value from get_forms[0]: coded info about form		
irb(main):005:0> show_elements(login_form) 	# List form elements (fields & controls)
name: name value: 			# Just 1 element (text field) named 'name', which is empty.  Note internal element name may not match displayed field label 
=> nil 
irb(main):006:0> login_form.name = "brian" 	# Set value of 'name' field.  Note appearance in IE
=> "brian" 
irb(main):007:0> login_form.submit 	# Invoke action of login form (like hitting 'enter' key); IE opens new page
=> nil 
irb(main):008:0> show_forms 		# Show form actions on new page
action: job 				# One form with action named 'job'
=> nil 
irb(main):009:0> job_form = get_forms[0] 	# Assign the form to variable 'job_form'
=> #<CLabs::IEC::IEDomFormWrapper:0x2af2c78 @form=#<WIN32OLE:0x2af2c90>>     # Coded info from get_forms[0]
irb(main):010:0> show_elements(job_form) 	# List form elements (controls)
name: session value: 24199864 			# (Hidden) element for session ID
name: name value: 				# Empty (job) 'name' (text) field
name: background value: true 			# 'background' (checkbox), currently checked
=> nil 
irb(main):011:0> job_form.name = "misc" 	# Enter string in 'name' text field 
=> nil 
irb(main):012:0> job_form.submit 		# Submit form. The main timeclock page appears.	
=> nil 

(continued)

irb(main):013:0> show_forms 	# Show the form actions on current page.
action: start_day 		# Action of zeroth form
action: start 			# Action of first form
action: job 			# Action of second form
action: start 			# Action of third form.  Note two forms have the same action. Hmm.
=> nil 
irb(main):014:0> start_form = get_form_by_action("start") 	#  Another way to pick a form: by action (instead of by index).  Uses the first form that matches the “start” action.
=> #<CLabs::IEC::IEDomFormWrapper:0x2adae40 @form=#<WIN32OLE:0x2adaea0>> 
irb(main):015:0> show_elements(start_form) 	# What is the name of the “misc” button?
name: session value: 24199864 
name: name value: misc 			# (Button) name is “name”; value is “misc”.
=> nil 
irb(main):016:0> get_element_by_value(start_form,"misc").click 	# Select the button by its value, and click it.  IE updates text on page.
=> nil 
irb(main):017:0> show_forms 		# What new forms have appeared?
action: pause_or_stop_day 
action: start 
action: job 
action: refresh 
action: pause_or_stop_job 
action: start 
=> nil 
irb(main):018:0> refresh_form = get_form_by_action("refresh")
=> #<CLabs::IEC::IEDomFormWrapper:0x2acd448 @form=#<WIN32OLE:0x2acd4a8>> 
irb(main):019:0> show_elements(refresh_form) 	# What is the button name?
name: session value: 24199864 
name: refresh value: Refresh 
=> nil 
irb(main):020:0> refresh_form.elements("refresh").click 	# Select the button and click it.  Uses another way to select an element: by name.  IE updates the page content. 
=> nil 	
